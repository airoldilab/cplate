#!python

# Load libraries
import sys
import getopt
import time

import yaml
import numpy as np
from mpi4py import MPI

from cplate import deconvolve_em

HELP = '''
Usage: cplate_deconvolve_em [options] CONFIG

Options:
  -h, --help            Show this help message and exit
  -c CHROM, --chrom=CHROM
                        Index of chromosome to analyze; defaults to 1
  --null                Run using null input from CONFIG

Details of the required format for the YAML CONFIG file can be found it further
documentation.
'''

def main(argv):
    '''
    Main function for option-parsing and startup.
    
    Takes sys.argv[1:] as input.
    '''
    # Set default values for options
    chrom   = 1
    null    = False
    
    # Parse arguments and options
    opts, args = getopt.getopt(argv, "hc:",
                               ["help", "chrom=", "null"])
    for option, value in opts:
        if option in ('-h', "--help"):
            print >> sys.stderr, HELP
            sys.exit(2)
        elif option in ('-c', '--chrom'):
            chrom = int(value)
        elif option == '--null':
            null = True
        else:
            print >> sys.stderr, "Error -- unknown option %s" % option
            sys.exit(1)

    if len(args) > 0:
        cfg_path = args[0]
    else:
        print >> sys.stderr, "Error -- need path to YAML configuration"
        sys.exit(1)
    
    # Parse YAML configuration
    cfg_file = open(cfg_path, 'rb')
    cfg = yaml.load(cfg_file)
    cfg_file.close()
    
    # Start MPI communications
    comm = MPI.COMM_WORLD
    
    # Run estimation
    results = deconvolve_em.run(cfg=cfg, comm=comm, chrom=chrom, null=null)

    if comm.Get_rank() == deconvolve_em.MPIROOT:
        # Write output to files
        deconvolve_em.write_results(results=results, cfg=cfg, chrom=chrom,
                                    null=null)

if __name__ == '__main__':
    main(sys.argv[1:])

