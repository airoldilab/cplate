#!/usr/bin/env python

import getopt
import sys

from cplate import lib_template

kHelpMessage = '''
SYNOPSIS
    cplate_estimate_template
    cplate_estimate_template [OPTIONS] [FILE]
    #
DESCRIPTION
    cplate_estimate_template

    Estimates template via non-parametric maximum likelihood (discrete
    deconvolution) using distribution of fragment lengths.
    
    Takes two-column fragment length distribution as input from file or stdin.
    First column is length, second is number of reads with that length.
    
    Prints template in single-column format to stdout.

OPTIONS
    --coverage=         Coverage for shortened template; defaults to 0.999
    --l0=               Baseline fragment length; defaults to 147
    -h/--help           Print help message and exit
'''

def main(argv):
  # Set default parameters
  coverage = 0.999
  l0 = 147
  rescale = True
  verbose = 0
  
  # Parse arguments
  options, args = getopt.getopt(argv, "hv:",
                                ["coverage =","l0=","help","verbose="])
  #
  for opt, value in options:
    if opt in ('-h', "--help"):
      print >> sys.stderr, kHelpMessage
      sys.exit(2)
    elif opt in ("--coverage",):
      coverage = float(value)
    elif opt in ("--l0",):
      l0 = int(value)
    elif opt in ("-v", "--verbose"):
      verbose = int(value)
    else:
      print >> sys.stderr, "Error -- option %s not recognized" % opt
      sys.exit(1)
  #
  if len(args) < 1:
    distFile = sys.stdin
  else:
    lengthDistPath = args[0]
    try:
      distFile = open(lengthDistPath, "rb")
    except:
      print >> sys.stderr, "Error -- could not open %s" % lengthDistPath
      sys.exit(1)
  
  # Build distribution and write to stdout
  lib_template.buildTemplateFromDist(distFile, sys.stdout, l0, coverage,
                                     verbose, rescale)
  
  sys.exit(0)

if __name__ == "__main__":
  main(sys.argv[1:])

